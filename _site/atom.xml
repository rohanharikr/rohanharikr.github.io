<!DOCTYPE html><html lang="en" ><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator" content="Jekyll v4.1.0" /><meta property="og:title" content="rohan" /><meta name="author" content="rohan" /><meta property="og:locale" content="en_US" /><meta name="description" content="I have too many hobbies…" /><meta property="og:description" content="I have too many hobbies…" /><link rel="canonical" href="http://localhost:4000/atom.xml" /><meta property="og:url" content="http://localhost:4000/atom.xml" /><meta property="og:site_name" content="rohan" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="rohan" /><meta name="twitter:site" content="@rohanharikr" /><meta name="twitter:creator" content="@rohanharikr" /> <script type="application/ld+json"> {"author":{"@type":"Person","name":"rohan"},"description":"I have too many hobbies…","@type":"WebPage","headline":"rohan","url":"http://localhost:4000/atom.xml","@context":"https://schema.org"}</script><title> rohan - I have too many hobbies...</title><link rel="shortcut icon" href="/favicon.png"><link rel="alternate" type="application/atom+xml" title="rohan" href="/atom.xml"><link rel="alternate" type="application/json" title="rohan" href="http://localhost:4000/feed.json" /><link rel="sitemap" type="application/xml" title="sitemap" href="/sitemap.xml" /><style> *,:after,:before{box-sizing:border-box;background-color:inherit;color:inherit;margin:0;padding:0}body{font-family:system-ui, sans-serif;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;line-height:1.5;font-size:1rem;color:#16171a}nav ul{border-right:1px solid #edf2f7}a{color:#000;text-decoration-skip-ink:auto;text-decoration:underline}pre{margin:.5rem 0;padding:.5rem}.post p{margin:.5rem 0}.post h1,.post h2,.post h3,.post h4{margin:1rem 0}.post h2:first-child,.project h2:first-child,.photo h2:first-child{margin-top:0}.meta{margin:2rem 0}code,pre{background:#ecedee}code{padding:.1rem}pre code{border:none}pre{padding:1rem;overflow-x:auto}img{max-width:100%}hr{background:#000;height:1px;border:0}header{flex-basis:10rem;flex-grow:1;position:relative}header a{text-decoration:none}header li{margin-bottom:.2rem;text-align:right;margin-right:2rem}header a.active{font-weight:bold}header,section{padding:1rem}blockquote{font-style:italic;border-left:5px solid #ececec;padding-left:1rem}h1,h2,h3,h4,h5{line-height:1;margin:1rem 0;font-weight:600}section h1:first-child{margin-top:0}strong,b{font-weight:bold}.photos ul{list-style:none}.photos li{margin-bottom:1.5rem}.photo picture,.project picture{margin-bottom:0.5rem}.posts ul,header ul{list-style:none}.posts li{align-items:center;display:flex;justify-content:space-between;margin-bottom:.5rem}.posts li a,.posts li div,.projects li a{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-decoration:none}.posts li time,.projects li time{padding-left:1rem;white-space:nowrap;font-variant-numeric:tabular-nums}main{display:flex;flex-wrap:wrap;max-width:60rem;margin:2rem auto;padding:1rem}@media screen and (max-width: 45rem){header li{display:inline;margin-right:1rem}.logo{padding-bottom:1rem}header ul{border-bottom:1px solid #edf2f7;padding-bottom:2rem}nav ul{border-right:0px}.photos ul{margin-top:0.5rem}}section{flex-basis:0;flex-grow:999;min-width:70%;display:flex;flex-direction:column}figcaption{font-size:smaller}</style></head><body><main role="main"><header role="banner"> <!--<h1 class="logo">rohan</h1>--><nav role="navigation"><ul><li><a href="/" >About</a></li><li><a href="/projects" >Work</a></li><li><a href="/writing" >Writing</a></li><li><a href="/search" >Search</a></li><li><a href="/atom.xml" class="active">Rss</a></li></ul></nav></header><section class="post"><h2></h2><?xml version="1.0" encoding="utf-8"?> <feed xmlns="http://www.w3.org/2005/Atom"><title>rohan</title><link href="http://localhost:4000/atom.xml" rel="self"/><link href="http://localhost:4000/"/> <updated>2020-07-13T00:40:14+05:30</updated> <id>http://localhost:4000</id> <author> <name>rohan</name> <email>rohanharikumar80@gmail.com</email> </author> <entry><title>Show latest commit on Svelte</title><link href="http://localhost:4000/2020/06/11/show-latest-commit-svelte"/> <updated>2020-06-11T00:00:00+05:30</updated> <id>http://localhost:4000/2020/06/11/show-latest-commit-svelte</id> <content type="html">&lt;h4 id=&quot;scroll-down-for-full-code&quot;&gt;&lt;a href=&quot;#full-code&quot;&gt;Scroll down for full code&lt;/a&gt;&lt;/h4&gt; &lt;h4 id=&quot;output&quot;&gt;Output&lt;/h4&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;commit 72ea82s &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;import-onmount-from-svelte&quot;&gt;Import onMount from Svelte&lt;/h4&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import { onMount } from 'svelte'&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onMount&lt;/code&gt; runs immediately after the component is rendered to the DOM.&lt;/p&gt; &lt;h4 id=&quot;write-a-simple-fetch-function-to-fetch-from-the-github-api&quot;&gt;Write a simple fetch function to fetch from the Github API&lt;/h4&gt; &lt;p&gt;So here we are telling Svelte to fetch some data from this API when the component is first rendered. Note that the functions inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onMount&lt;/code&gt; is only triggered when it enters the DOM.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;onMount(async () =&amp;gt; { await fetch('https://api.github.com/repos/${userName}/${repoName}/commits') .then((response) =&amp;gt; response.json()) .then((data) =&amp;gt; { id = data[0].sha.slice(0, 7) }) }) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await fetch('https://api.github.com/repos/${userName}/${repoName}/commits')&lt;/code&gt; Performs a fetch request to the Github API’s. Replace this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userName&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repoName&lt;/code&gt; with yours.&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.then((response) =&amp;gt; response.json())&lt;/code&gt;&lt;br /&gt; Converts the response to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.json&lt;/code&gt; objects.&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.then((data) =&amp;gt; {id = data[0].sha.slice(0, 7)})&lt;/code&gt;&lt;br /&gt; Assigning only the first index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data[0]&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sha&lt;/code&gt; key (where our commit id is) to a variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; since our request returned an array of objects with all the commits and info.&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slice(0,7)&lt;/code&gt;&lt;br /&gt; Takes only the first 7 digits since it is the Git default for a short SHA&lt;/p&gt; &lt;h4 id=&quot;full-code&quot;&gt;&lt;a name=&quot;full-code&quot;&gt;Full Code&lt;/a&gt;&lt;/h4&gt; &lt;script src=&quot;https://gist.github.com/rohanharikr/aef6d401adc26f403efe98d6238602d4.js&quot;&gt;&lt;/script&gt; </content> </entry> <entry><title>Rock, paper, scissors, javascript</title><link href="http://localhost:4000/2020/06/02/rock-paper-scissors-javascript"/> <updated>2020-06-02T00:00:00+05:30</updated> <id>http://localhost:4000/2020/06/02/rock-paper-scissors-javascript</id> <content type="html">&lt;h4 id=&quot;scroll-down-for-full-code&quot;&gt;&lt;a href=&quot;#full-code&quot;&gt;Scroll down for full code&lt;/a&gt;&lt;/h4&gt; &lt;h4 id=&quot;output&quot;&gt;Output&lt;/h4&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Pass a choice as an argument to the main function. You chose paper and computer chose rock. You win! &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;create-an-array-of-all-possible-choices&quot;&gt;Create an array of all possible choices&lt;/h4&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const choices = [&quot;rock&quot;, &quot;paper&quot;, &quot;scissors&quot;]&lt;/code&gt;&lt;/p&gt; &lt;h4 id=&quot;random-choice&quot;&gt;Random Choice&lt;/h4&gt; &lt;p&gt;This would give us a random number between 1 and the array length which in this case happens to be 3.&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Math.floor(Math.random() * choices.length)&lt;/code&gt;&lt;/p&gt; &lt;h4 id=&quot;main-function&quot;&gt;Main function&lt;/h4&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random Choice&lt;/code&gt; code is put inside a function because ideally, every time this function is called, a new choice would be generated.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`) ...} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;matchmaking&quot;&gt;Matchmaking&lt;/h4&gt; &lt;p&gt;First things first, let’s consider all the tie cases.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`) if (userChoice === computerChoice) { console.log(&quot;It's a tie!&quot;) } ...} &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;all-the-cases-when-your-choice-is-rock&quot;&gt;All the cases when your choice is rock&lt;/h4&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (userChoice === &quot;rock&quot;) { if (computerChoice === &quot;paper&quot;) { console.log(&quot;You lost!&quot;) } else if (computerChoice === &quot;scissors&quot;) { console.log(&quot;You won!&quot;) } &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;repeat-for-other-n-choices-this-case-two&quot;&gt;Repeat for other n choices; this case, two&lt;/h4&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (userChoice === &quot;paper&quot;) { if (computerChoice === &quot;rock&quot;) { console.log(&quot;You won!&quot;) } else if (computerChoice === &quot;scissors&quot;) { console.log(&quot;You lost!&quot;) } } if (userChoice === &quot;scissors&quot;) { if (computerChoice === &quot;rock&quot;) { console.log(&quot;You lost!&quot;) } else if (computerChoice === &quot;paper&quot;) { console.log(&quot;You won!&quot;) } } &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;optimise-by-writing-all-the-cases-in-one-block&quot;&gt;Optimise by writing all the cases in one block&lt;/h4&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (userChoice === computerChoice) { console.log(&quot;It's a tie!&quot;) } else if (userChoice === &quot;rock&quot;) { if (computerChoice === &quot;paper&quot;) { console.log(&quot;You lost!&quot;) } else if (computerChoice === &quot;scissors&quot;) { console.log(&quot;You won!&quot;) } } else if (userChoice === &quot;paper&quot;) { if (computerChoice === &quot;rock&quot;) { console.log(&quot;You won!&quot;) } else if (computerChoice === &quot;scissors&quot;) { console.log(&quot;You lost!&quot;) } } else if (userChoice === &quot;scissors&quot;) { if (computerChoice === &quot;rock&quot;) { console.log(&quot;You lost!&quot;) } else if (computerChoice === &quot;paper&quot;) { console.log(&quot;You won!&quot;) } } &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h4 id=&quot;full-code&quot;&gt;&lt;a name=&quot;full-code&quot;&gt;Full Code&lt;/a&gt;&lt;/h4&gt; &lt;script src=&quot;https://gist.github.com/rohanharikr/8bfbd1471389e795b436cd87ab09a444.js&quot;&gt;&lt;/script&gt; </content> </entry> <entry><title>See who liked you without Tinder Gold</title><link href="http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold"/> <updated>2019-04-05T00:00:00+05:30</updated> <id>http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold</id> <content type="html">&lt;h4 id=&quot;result&quot;&gt;Result&lt;/h4&gt; &lt;p&gt;Images of people who liked you at 640x800, 320x400, 172x216 without Tinder Gold.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/images/result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h4 id=&quot;so&quot;&gt;So&lt;/h4&gt; &lt;p&gt;Tinder likes without Gold comes up like this, a blur effect on the photo(s).&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/images/tindergold.png&quot; alt=&quot;&quot; /&gt; Initially, I thought that the blurred images were sent from their servers itself. A simple inspection on the code&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-webkit-filter: blur(8px) filter: blur(8px) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Okay, so they are applying a blur effect with CSS. Disabling this would give me a raw image of 172x216 dimension. Exploring media items, the recently liked (only one) would be of 320x400 dimension.&lt;/p&gt; &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://preview.gotinder.com/18d6e533-c874-48ad-ac66-ae6b63aa77fb/172x216_c77f0e5c-40b4-4af4-9b68-5f0ff26ead90.jpg &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The 172x216 in the URL is the dimensions. Changing it to 320x400, would give me an image of that dimension. All the images were coming from the same endpoint. So, I tried changing it to random dimensions with the same aspect ratio which like I guessed didn’t work because they were not storing (x dimension) in their server.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/images/error.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;Also, noticed that my profile picture was of better quality.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;../../../assets/images/profile.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;To my surprise, that too was coming from the same endpoint. So, now I know that Tinder stores images in 640x800 also.&lt;/p&gt; &lt;p&gt;So, that’s that.&lt;/p&gt; </content> </entry> </feed></section></main></body></html>
