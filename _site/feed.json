<!DOCTYPE html><html lang="en" ><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><meta name="generator" content="Jekyll v4.1.0" /><meta property="og:title" content="rohan" /><meta name="author" content="rohan" /><meta property="og:locale" content="en_US" /><meta name="description" content="{ “version”: “https://jsonfeed.org/version/1”, “title”: “rohan”, “home_page_url”: “http://localhost:4000/”, “feed_url”: “http://localhost:4000/feed.json”, “description”: “I have too many hobbies…”, “icon”: “http://localhost:4000/apple-touch-icon.png”, “favicon”: “http://localhost:4000/favicon.ico”, “expired”: false, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null }, “items”: [ { &quot;id&quot;: &quot;http://localhost:4000/2020/06/11/show-latest-commit-svelte&quot;, &quot;title&quot;: &quot;Show latest commit on Svelte&quot;, &quot;summary&quot;: null, &quot;content_text&quot;: &quot;Scroll down for full codeOutputcommit 72ea82sImport onMount from Svelteimport { onMount } from &#39;svelte&#39;onMount runs immediately after the component is rendered to the DOM.Write a simple fetch function to fetch from the Github APISo here we are telling Svelte to fetch some data from this API when the component is first rendered. Note that the functions inside the onMount is only triggered when it enters the DOM.onMount(async () =&amp;gt; { await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;) .then((response) =&amp;gt; response.json()) .then((data) =&amp;gt; { id = data[0].sha.slice(0, 7) })})await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;)Performs a fetch request to the Github API’s. Replace this userName and repoName with yours..then((response) =&amp;gt; response.json())Converts the response to .json objects..then((data) =&amp;gt; {id = data[0].sha.slice(0, 7)})Assigning only the first index data[0] sha key (where our commit id is) to a variable id since our request returned an array of objects with all the commits and info.slice(0,7)Takes only the first 7 digits since it is the Git default for a short SHAFull Code&quot;, &quot;content_html&quot;: &quot;&lt;h4 id=\&quot;scroll-down-for-full-code\&quot;&gt;&lt;a href=\&quot;#full-code\&quot;&gt;Scroll down for full code&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=\&quot;output\&quot;&gt;Output&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;commit 72ea82s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;import-onmount-from-svelte\&quot;&gt;Import onMount from Svelte&lt;/h4&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;import { onMount } from &#39;svelte&#39;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;onMount&lt;/code&gt; runs immediately after the component is rendered to the DOM.&lt;/p&gt;&lt;h4 id=\&quot;write-a-simple-fetch-function-to-fetch-from-the-github-api\&quot;&gt;Write a simple fetch function to fetch from the Github API&lt;/h4&gt;&lt;p&gt;So here we are telling Svelte to fetch some data from this API when the component is first rendered. Note that the functions inside the &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;onMount&lt;/code&gt; is only triggered when it enters the DOM.&lt;/p&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;onMount(async () =&amp;gt; { await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;) .then((response) =&amp;gt; response.json()) .then((data) =&amp;gt; { id = data[0].sha.slice(0, 7) })})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;)&lt;/code&gt;Performs a fetch request to the Github API’s. Replace this &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;userName&lt;/code&gt; and &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;repoName&lt;/code&gt; with yours.&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;.then((response) =&amp;gt; response.json())&lt;/code&gt;&lt;br /&gt;Converts the response to &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;.json&lt;/code&gt; objects.&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;.then((data) =&amp;gt; {id = data[0].sha.slice(0, 7)})&lt;/code&gt;&lt;br /&gt;Assigning only the first index &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;data[0]&lt;/code&gt; &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;sha&lt;/code&gt; key (where our commit id is) to a variable &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;id&lt;/code&gt; since our request returned an array of objects with all the commits and info.&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;slice(0,7)&lt;/code&gt;&lt;br /&gt;Takes only the first 7 digits since it is the Git default for a short SHA&lt;/p&gt;&lt;h4 id=\&quot;full-code\&quot;&gt;&lt;a name=\&quot;full-code\&quot;&gt;Full Code&lt;/a&gt;&lt;/h4&gt;&lt;script src=\&quot;https://gist.github.com/rohanharikr/aef6d401adc26f403efe98d6238602d4.js\&quot;&gt;&lt;/script&gt;&quot;, &quot;url&quot;: &quot;http://localhost:4000/2020/06/11/show-latest-commit-svelte&quot;, &quot;date_published&quot;: &quot;2020-06-11T00:00:00+05:30&quot;, &quot;date_modified&quot;: &quot;2020-06-11T00:00:00+05:30&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null } }, { &quot;id&quot;: &quot;http://localhost:4000/2020/06/02/rock-paper-scissors-javascript&quot;, &quot;title&quot;: &quot;Rock, paper, scissors, javascript&quot;, &quot;summary&quot;: null, &quot;content_text&quot;: &quot;Scroll down for full codeOutput// Pass a choice as an argument to the main function.You chose paper and computer chose rock.You win!Create an array of all possible choicesconst choices = [\&quot;rock\&quot;, \&quot;paper\&quot;, \&quot;scissors\&quot;]Random ChoiceThis would give us a random number between 1 and the array length which in this case happens to be 3.Math.floor(Math.random() * choices.length)Main functionThe Random Choice code is put inside a function because ideally, every time this function is called, a new choice would be generated.function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`)...}MatchmakingFirst things first, let’s consider all the tie cases.function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`) \tif (userChoice === computerChoice) { console.log(\&quot;It&#39;s a tie!\&quot;) }...}All the cases when your choice is rockif (userChoice === \&quot;rock\&quot;) {\tif (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You won!\&quot;) }Repeat for other n choices; this case, twoif (userChoice === \&quot;paper\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You won!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You lost!\&quot;) }}if (userChoice === \&quot;scissors\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You won!\&quot;) }}Optimise by writing all the cases in one blockif (userChoice === computerChoice) { console.log(\&quot;It&#39;s a tie!\&quot;) } else if (userChoice === \&quot;rock\&quot;) { if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You won!\&quot;) } } else if (userChoice === \&quot;paper\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You won!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You lost!\&quot;) } } else if (userChoice === \&quot;scissors\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You won!\&quot;) } }Full Code&quot;, &quot;content_html&quot;: &quot;&lt;h4 id=\&quot;scroll-down-for-full-code\&quot;&gt;&lt;a href=\&quot;#full-code\&quot;&gt;Scroll down for full code&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=\&quot;output\&quot;&gt;Output&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;// Pass a choice as an argument to the main function.You chose paper and computer chose rock.You win!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;create-an-array-of-all-possible-choices\&quot;&gt;Create an array of all possible choices&lt;/h4&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;const choices = [\&quot;rock\&quot;, \&quot;paper\&quot;, \&quot;scissors\&quot;]&lt;/code&gt;&lt;/p&gt;&lt;h4 id=\&quot;random-choice\&quot;&gt;Random Choice&lt;/h4&gt;&lt;p&gt;This would give us a random number between 1 and the array length which in this case happens to be 3.&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;Math.floor(Math.random() * choices.length)&lt;/code&gt;&lt;/p&gt;&lt;h4 id=\&quot;main-function\&quot;&gt;Main function&lt;/h4&gt;&lt;p&gt;The &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;Random Choice&lt;/code&gt; code is put inside a function because ideally, every time this function is called, a new choice would be generated.&lt;/p&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`)...}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;matchmaking\&quot;&gt;Matchmaking&lt;/h4&gt;&lt;p&gt;First things first, let’s consider all the tie cases.&lt;/p&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`) \tif (userChoice === computerChoice) { console.log(\&quot;It&#39;s a tie!\&quot;) }...}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;all-the-cases-when-your-choice-is-rock\&quot;&gt;All the cases when your choice is rock&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;if (userChoice === \&quot;rock\&quot;) {\tif (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You won!\&quot;) }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;repeat-for-other-n-choices-this-case-two\&quot;&gt;Repeat for other n choices; this case, two&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;if (userChoice === \&quot;paper\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You won!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You lost!\&quot;) }}if (userChoice === \&quot;scissors\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You won!\&quot;) }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;optimise-by-writing-all-the-cases-in-one-block\&quot;&gt;Optimise by writing all the cases in one block&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;if (userChoice === computerChoice) { console.log(\&quot;It&#39;s a tie!\&quot;) } else if (userChoice === \&quot;rock\&quot;) { if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You won!\&quot;) } } else if (userChoice === \&quot;paper\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You won!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You lost!\&quot;) } } else if (userChoice === \&quot;scissors\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You won!\&quot;) } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;full-code\&quot;&gt;&lt;a name=\&quot;full-code\&quot;&gt;Full Code&lt;/a&gt;&lt;/h4&gt;&lt;script src=\&quot;https://gist.github.com/rohanharikr/8bfbd1471389e795b436cd87ab09a444.js\&quot;&gt;&lt;/script&gt;&quot;, &quot;url&quot;: &quot;http://localhost:4000/2020/06/02/rock-paper-scissors-javascript&quot;, &quot;date_published&quot;: &quot;2020-06-02T00:00:00+05:30&quot;, &quot;date_modified&quot;: &quot;2020-06-02T00:00:00+05:30&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null } }, { &quot;id&quot;: &quot;http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold&quot;, &quot;title&quot;: &quot;See who liked you without Tinder Gold&quot;, &quot;summary&quot;: &quot;What is the difference between various font formats?&quot;, &quot;content_text&quot;: &quot;ResultImages of people who liked you at 640x800, 320x400, 172x216 without Tinder Gold.SoTinder likes without Gold comes up like this, a blur effect on the photo(s). \tInitially, I thought that the blurred images were sent from their servers itself.A simple inspection on the code-webkit-filter: blur(8px)filter: blur(8px)Okay, so they are applying a blur effect with CSS. Disabling this would give me a raw image of 172x216 dimension. Exploring media items, the recently liked (only one) would be of 320x400 dimension.https://preview.gotinder.com/18d6e533-c874-48ad-ac66-ae6b63aa77fb/172x216_c77f0e5c-40b4-4af4-9b68-5f0ff26ead90.jpgThe 172x216 in the URL is the dimensions. Changing it to 320x400, would give me an image of that dimension. All the images were coming from the same endpoint. So, I tried changing it to random dimensions with the same aspect ratio which like I guessed didn’t work because they were not storing (x dimension) in their server.Also, noticed that my profile picture was of better quality.To my surprise, that too was coming from the same endpoint. So, now I know that Tinder stores images in 640x800 also.So, that’s that.&quot;, &quot;content_html&quot;: &quot;&lt;h4 id=\&quot;result\&quot;&gt;Result&lt;/h4&gt;&lt;p&gt;Images of people who liked you at 640x800, 320x400, 172x216 without Tinder Gold.&lt;/p&gt;&lt;p&gt;&lt;img src=\&quot;../../../assets/images/result.png\&quot; alt=\&quot;\&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h4 id=\&quot;so\&quot;&gt;So&lt;/h4&gt;&lt;p&gt;Tinder likes without Gold comes up like this, a blur effect on the photo(s).&lt;/p&gt;&lt;p&gt;&lt;img src=\&quot;../../../assets/images/tindergold.png\&quot; alt=\&quot;\&quot; /&gt; \tInitially, I thought that the blurred images were sent from their servers itself.A simple inspection on the code&lt;/p&gt;&lt;div class=\&quot;language-html highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;-webkit-filter: blur(8px)filter: blur(8px)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Okay, so they are applying a blur effect with CSS. Disabling this would give me a raw image of 172x216 dimension. Exploring media items, the recently liked (only one) would be of 320x400 dimension.&lt;/p&gt;&lt;div class=\&quot;language-html highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;https://preview.gotinder.com/18d6e533-c874-48ad-ac66-ae6b63aa77fb/172x216_c77f0e5c-40b4-4af4-9b68-5f0ff26ead90.jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The 172x216 in the URL is the dimensions. Changing it to 320x400, would give me an image of that dimension. All the images were coming from the same endpoint. So, I tried changing it to random dimensions with the same aspect ratio which like I guessed didn’t work because they were not storing (x dimension) in their server.&lt;/p&gt;&lt;p&gt;&lt;img src=\&quot;../../../assets/images/error.png\&quot; alt=\&quot;\&quot; /&gt;&lt;/p&gt;&lt;p&gt;Also, noticed that my profile picture was of better quality.&lt;/p&gt;&lt;p&gt;&lt;img src=\&quot;../../../assets/images/profile.png\&quot; alt=\&quot;\&quot; /&gt;&lt;/p&gt;&lt;p&gt;To my surprise, that too was coming from the same endpoint. So, now I know that Tinder stores images in 640x800 also.&lt;/p&gt;&lt;p&gt;So, that’s that.&lt;/p&gt;&quot;, &quot;url&quot;: &quot;http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold&quot;, &quot;date_published&quot;: &quot;2019-04-05T00:00:00+05:30&quot;, &quot;date_modified&quot;: &quot;2019-04-05T00:00:00+05:30&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null } } ] }" /><meta property="og:description" content="{ “version”: “https://jsonfeed.org/version/1”, “title”: “rohan”, “home_page_url”: “http://localhost:4000/”, “feed_url”: “http://localhost:4000/feed.json”, “description”: “I have too many hobbies…”, “icon”: “http://localhost:4000/apple-touch-icon.png”, “favicon”: “http://localhost:4000/favicon.ico”, “expired”: false, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null }, “items”: [ { &quot;id&quot;: &quot;http://localhost:4000/2020/06/11/show-latest-commit-svelte&quot;, &quot;title&quot;: &quot;Show latest commit on Svelte&quot;, &quot;summary&quot;: null, &quot;content_text&quot;: &quot;Scroll down for full codeOutputcommit 72ea82sImport onMount from Svelteimport { onMount } from &#39;svelte&#39;onMount runs immediately after the component is rendered to the DOM.Write a simple fetch function to fetch from the Github APISo here we are telling Svelte to fetch some data from this API when the component is first rendered. Note that the functions inside the onMount is only triggered when it enters the DOM.onMount(async () =&amp;gt; { await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;) .then((response) =&amp;gt; response.json()) .then((data) =&amp;gt; { id = data[0].sha.slice(0, 7) })})await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;)Performs a fetch request to the Github API’s. Replace this userName and repoName with yours..then((response) =&amp;gt; response.json())Converts the response to .json objects..then((data) =&amp;gt; {id = data[0].sha.slice(0, 7)})Assigning only the first index data[0] sha key (where our commit id is) to a variable id since our request returned an array of objects with all the commits and info.slice(0,7)Takes only the first 7 digits since it is the Git default for a short SHAFull Code&quot;, &quot;content_html&quot;: &quot;&lt;h4 id=\&quot;scroll-down-for-full-code\&quot;&gt;&lt;a href=\&quot;#full-code\&quot;&gt;Scroll down for full code&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=\&quot;output\&quot;&gt;Output&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;commit 72ea82s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;import-onmount-from-svelte\&quot;&gt;Import onMount from Svelte&lt;/h4&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;import { onMount } from &#39;svelte&#39;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;onMount&lt;/code&gt; runs immediately after the component is rendered to the DOM.&lt;/p&gt;&lt;h4 id=\&quot;write-a-simple-fetch-function-to-fetch-from-the-github-api\&quot;&gt;Write a simple fetch function to fetch from the Github API&lt;/h4&gt;&lt;p&gt;So here we are telling Svelte to fetch some data from this API when the component is first rendered. Note that the functions inside the &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;onMount&lt;/code&gt; is only triggered when it enters the DOM.&lt;/p&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;onMount(async () =&amp;gt; { await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;) .then((response) =&amp;gt; response.json()) .then((data) =&amp;gt; { id = data[0].sha.slice(0, 7) })})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;)&lt;/code&gt;Performs a fetch request to the Github API’s. Replace this &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;userName&lt;/code&gt; and &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;repoName&lt;/code&gt; with yours.&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;.then((response) =&amp;gt; response.json())&lt;/code&gt;&lt;br /&gt;Converts the response to &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;.json&lt;/code&gt; objects.&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;.then((data) =&amp;gt; {id = data[0].sha.slice(0, 7)})&lt;/code&gt;&lt;br /&gt;Assigning only the first index &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;data[0]&lt;/code&gt; &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;sha&lt;/code&gt; key (where our commit id is) to a variable &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;id&lt;/code&gt; since our request returned an array of objects with all the commits and info.&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;slice(0,7)&lt;/code&gt;&lt;br /&gt;Takes only the first 7 digits since it is the Git default for a short SHA&lt;/p&gt;&lt;h4 id=\&quot;full-code\&quot;&gt;&lt;a name=\&quot;full-code\&quot;&gt;Full Code&lt;/a&gt;&lt;/h4&gt;&lt;script src=\&quot;https://gist.github.com/rohanharikr/aef6d401adc26f403efe98d6238602d4.js\&quot;&gt;&lt;/script&gt;&quot;, &quot;url&quot;: &quot;http://localhost:4000/2020/06/11/show-latest-commit-svelte&quot;, &quot;date_published&quot;: &quot;2020-06-11T00:00:00+05:30&quot;, &quot;date_modified&quot;: &quot;2020-06-11T00:00:00+05:30&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null } }, { &quot;id&quot;: &quot;http://localhost:4000/2020/06/02/rock-paper-scissors-javascript&quot;, &quot;title&quot;: &quot;Rock, paper, scissors, javascript&quot;, &quot;summary&quot;: null, &quot;content_text&quot;: &quot;Scroll down for full codeOutput// Pass a choice as an argument to the main function.You chose paper and computer chose rock.You win!Create an array of all possible choicesconst choices = [\&quot;rock\&quot;, \&quot;paper\&quot;, \&quot;scissors\&quot;]Random ChoiceThis would give us a random number between 1 and the array length which in this case happens to be 3.Math.floor(Math.random() * choices.length)Main functionThe Random Choice code is put inside a function because ideally, every time this function is called, a new choice would be generated.function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`)...}MatchmakingFirst things first, let’s consider all the tie cases.function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`) \tif (userChoice === computerChoice) { console.log(\&quot;It&#39;s a tie!\&quot;) }...}All the cases when your choice is rockif (userChoice === \&quot;rock\&quot;) {\tif (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You won!\&quot;) }Repeat for other n choices; this case, twoif (userChoice === \&quot;paper\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You won!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You lost!\&quot;) }}if (userChoice === \&quot;scissors\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You won!\&quot;) }}Optimise by writing all the cases in one blockif (userChoice === computerChoice) { console.log(\&quot;It&#39;s a tie!\&quot;) } else if (userChoice === \&quot;rock\&quot;) { if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You won!\&quot;) } } else if (userChoice === \&quot;paper\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You won!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You lost!\&quot;) } } else if (userChoice === \&quot;scissors\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You won!\&quot;) } }Full Code&quot;, &quot;content_html&quot;: &quot;&lt;h4 id=\&quot;scroll-down-for-full-code\&quot;&gt;&lt;a href=\&quot;#full-code\&quot;&gt;Scroll down for full code&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=\&quot;output\&quot;&gt;Output&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;// Pass a choice as an argument to the main function.You chose paper and computer chose rock.You win!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;create-an-array-of-all-possible-choices\&quot;&gt;Create an array of all possible choices&lt;/h4&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;const choices = [\&quot;rock\&quot;, \&quot;paper\&quot;, \&quot;scissors\&quot;]&lt;/code&gt;&lt;/p&gt;&lt;h4 id=\&quot;random-choice\&quot;&gt;Random Choice&lt;/h4&gt;&lt;p&gt;This would give us a random number between 1 and the array length which in this case happens to be 3.&lt;/p&gt;&lt;p&gt;&lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;Math.floor(Math.random() * choices.length)&lt;/code&gt;&lt;/p&gt;&lt;h4 id=\&quot;main-function\&quot;&gt;Main function&lt;/h4&gt;&lt;p&gt;The &lt;code class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;Random Choice&lt;/code&gt; code is put inside a function because ideally, every time this function is called, a new choice would be generated.&lt;/p&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`)...}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;matchmaking\&quot;&gt;Matchmaking&lt;/h4&gt;&lt;p&gt;First things first, let’s consider all the tie cases.&lt;/p&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`) \tif (userChoice === computerChoice) { console.log(\&quot;It&#39;s a tie!\&quot;) }...}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;all-the-cases-when-your-choice-is-rock\&quot;&gt;All the cases when your choice is rock&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;if (userChoice === \&quot;rock\&quot;) {\tif (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You won!\&quot;) }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;repeat-for-other-n-choices-this-case-two\&quot;&gt;Repeat for other n choices; this case, two&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;if (userChoice === \&quot;paper\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You won!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You lost!\&quot;) }}if (userChoice === \&quot;scissors\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You won!\&quot;) }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;optimise-by-writing-all-the-cases-in-one-block\&quot;&gt;Optimise by writing all the cases in one block&lt;/h4&gt;&lt;div class=\&quot;language-plaintext highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;if (userChoice === computerChoice) { console.log(\&quot;It&#39;s a tie!\&quot;) } else if (userChoice === \&quot;rock\&quot;) { if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You won!\&quot;) } } else if (userChoice === \&quot;paper\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You won!\&quot;) } else if (computerChoice === \&quot;scissors\&quot;) { console.log(\&quot;You lost!\&quot;) } } else if (userChoice === \&quot;scissors\&quot;) { if (computerChoice === \&quot;rock\&quot;) { console.log(\&quot;You lost!\&quot;) } else if (computerChoice === \&quot;paper\&quot;) { console.log(\&quot;You won!\&quot;) } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\&quot;full-code\&quot;&gt;&lt;a name=\&quot;full-code\&quot;&gt;Full Code&lt;/a&gt;&lt;/h4&gt;&lt;script src=\&quot;https://gist.github.com/rohanharikr/8bfbd1471389e795b436cd87ab09a444.js\&quot;&gt;&lt;/script&gt;&quot;, &quot;url&quot;: &quot;http://localhost:4000/2020/06/02/rock-paper-scissors-javascript&quot;, &quot;date_published&quot;: &quot;2020-06-02T00:00:00+05:30&quot;, &quot;date_modified&quot;: &quot;2020-06-02T00:00:00+05:30&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null } }, { &quot;id&quot;: &quot;http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold&quot;, &quot;title&quot;: &quot;See who liked you without Tinder Gold&quot;, &quot;summary&quot;: &quot;What is the difference between various font formats?&quot;, &quot;content_text&quot;: &quot;ResultImages of people who liked you at 640x800, 320x400, 172x216 without Tinder Gold.SoTinder likes without Gold comes up like this, a blur effect on the photo(s). \tInitially, I thought that the blurred images were sent from their servers itself.A simple inspection on the code-webkit-filter: blur(8px)filter: blur(8px)Okay, so they are applying a blur effect with CSS. Disabling this would give me a raw image of 172x216 dimension. Exploring media items, the recently liked (only one) would be of 320x400 dimension.https://preview.gotinder.com/18d6e533-c874-48ad-ac66-ae6b63aa77fb/172x216_c77f0e5c-40b4-4af4-9b68-5f0ff26ead90.jpgThe 172x216 in the URL is the dimensions. Changing it to 320x400, would give me an image of that dimension. All the images were coming from the same endpoint. So, I tried changing it to random dimensions with the same aspect ratio which like I guessed didn’t work because they were not storing (x dimension) in their server.Also, noticed that my profile picture was of better quality.To my surprise, that too was coming from the same endpoint. So, now I know that Tinder stores images in 640x800 also.So, that’s that.&quot;, &quot;content_html&quot;: &quot;&lt;h4 id=\&quot;result\&quot;&gt;Result&lt;/h4&gt;&lt;p&gt;Images of people who liked you at 640x800, 320x400, 172x216 without Tinder Gold.&lt;/p&gt;&lt;p&gt;&lt;img src=\&quot;../../../assets/images/result.png\&quot; alt=\&quot;\&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h4 id=\&quot;so\&quot;&gt;So&lt;/h4&gt;&lt;p&gt;Tinder likes without Gold comes up like this, a blur effect on the photo(s).&lt;/p&gt;&lt;p&gt;&lt;img src=\&quot;../../../assets/images/tindergold.png\&quot; alt=\&quot;\&quot; /&gt; \tInitially, I thought that the blurred images were sent from their servers itself.A simple inspection on the code&lt;/p&gt;&lt;div class=\&quot;language-html highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;-webkit-filter: blur(8px)filter: blur(8px)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Okay, so they are applying a blur effect with CSS. Disabling this would give me a raw image of 172x216 dimension. Exploring media items, the recently liked (only one) would be of 320x400 dimension.&lt;/p&gt;&lt;div class=\&quot;language-html highlighter-rouge\&quot;&gt;&lt;div class=\&quot;highlight\&quot;&gt;&lt;pre class=\&quot;highlight\&quot;&gt;&lt;code&gt;https://preview.gotinder.com/18d6e533-c874-48ad-ac66-ae6b63aa77fb/172x216_c77f0e5c-40b4-4af4-9b68-5f0ff26ead90.jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The 172x216 in the URL is the dimensions. Changing it to 320x400, would give me an image of that dimension. All the images were coming from the same endpoint. So, I tried changing it to random dimensions with the same aspect ratio which like I guessed didn’t work because they were not storing (x dimension) in their server.&lt;/p&gt;&lt;p&gt;&lt;img src=\&quot;../../../assets/images/error.png\&quot; alt=\&quot;\&quot; /&gt;&lt;/p&gt;&lt;p&gt;Also, noticed that my profile picture was of better quality.&lt;/p&gt;&lt;p&gt;&lt;img src=\&quot;../../../assets/images/profile.png\&quot; alt=\&quot;\&quot; /&gt;&lt;/p&gt;&lt;p&gt;To my surprise, that too was coming from the same endpoint. So, now I know that Tinder stores images in 640x800 also.&lt;/p&gt;&lt;p&gt;So, that’s that.&lt;/p&gt;&quot;, &quot;url&quot;: &quot;http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold&quot;, &quot;date_published&quot;: &quot;2019-04-05T00:00:00+05:30&quot;, &quot;date_modified&quot;: &quot;2019-04-05T00:00:00+05:30&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null } } ] }" /><link rel="canonical" href="http://localhost:4000/feed.json" /><meta property="og:url" content="http://localhost:4000/feed.json" /><meta property="og:site_name" content="rohan" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="rohan" /><meta name="twitter:site" content="@rohanharikr" /><meta name="twitter:creator" content="@rohanharikr" /> <script type="application/ld+json"> {"author":{"@type":"Person","name":"rohan"},"description":"{ “version”: “https://jsonfeed.org/version/1”, “title”: “rohan”, “home_page_url”: “http://localhost:4000/”, “feed_url”: “http://localhost:4000/feed.json”, “description”: “I have too many hobbies…”, “icon”: “http://localhost:4000/apple-touch-icon.png”, “favicon”: “http://localhost:4000/favicon.ico”, “expired”: false, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null }, “items”: [ { &quot;id&quot;: &quot;http://localhost:4000/2020/06/11/show-latest-commit-svelte&quot;, &quot;title&quot;: &quot;Show latest commit on Svelte&quot;, &quot;summary&quot;: null, &quot;content_text&quot;: &quot;Scroll down for full codeOutputcommit 72ea82sImport onMount from Svelteimport { onMount } from &#39;svelte&#39;onMount runs immediately after the component is rendered to the DOM.Write a simple fetch function to fetch from the Github APISo here we are telling Svelte to fetch some data from this API when the component is first rendered. Note that the functions inside the onMount is only triggered when it enters the DOM.onMount(async () =&amp;gt; { await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;) .then((response) =&amp;gt; response.json()) .then((data) =&amp;gt; { id = data[0].sha.slice(0, 7) })})await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;)Performs a fetch request to the Github API’s. Replace this userName and repoName with yours..then((response) =&amp;gt; response.json())Converts the response to .json objects..then((data) =&amp;gt; {id = data[0].sha.slice(0, 7)})Assigning only the first index data[0] sha key (where our commit id is) to a variable id since our request returned an array of objects with all the commits and info.slice(0,7)Takes only the first 7 digits since it is the Git default for a short SHAFull Code&quot;, &quot;content_html&quot;: &quot;&lt;h4 id=\\&quot;scroll-down-for-full-code\\&quot;&gt;&lt;a href=\\&quot;#full-code\\&quot;&gt;Scroll down for full code&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=\\&quot;output\\&quot;&gt;Output&lt;/h4&gt;&lt;div class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;commit 72ea82s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\\&quot;import-onmount-from-svelte\\&quot;&gt;Import onMount from Svelte&lt;/h4&gt;&lt;p&gt;&lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;import { onMount } from &#39;svelte&#39;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;onMount&lt;/code&gt; runs immediately after the component is rendered to the DOM.&lt;/p&gt;&lt;h4 id=\\&quot;write-a-simple-fetch-function-to-fetch-from-the-github-api\\&quot;&gt;Write a simple fetch function to fetch from the Github API&lt;/h4&gt;&lt;p&gt;So here we are telling Svelte to fetch some data from this API when the component is first rendered. Note that the functions inside the &lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;onMount&lt;/code&gt; is only triggered when it enters the DOM.&lt;/p&gt;&lt;div class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;onMount(async () =&amp;gt; { await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;) .then((response) =&amp;gt; response.json()) .then((data) =&amp;gt; { id = data[0].sha.slice(0, 7) })})&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;await fetch(&#39;https://api.github.com/repos/${userName}/${repoName}/commits&#39;)&lt;/code&gt;Performs a fetch request to the Github API’s. Replace this &lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;userName&lt;/code&gt; and &lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;repoName&lt;/code&gt; with yours.&lt;/p&gt;&lt;p&gt;&lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;.then((response) =&amp;gt; response.json())&lt;/code&gt;&lt;br /&gt;Converts the response to &lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;.json&lt;/code&gt; objects.&lt;/p&gt;&lt;p&gt;&lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;.then((data) =&amp;gt; {id = data[0].sha.slice(0, 7)})&lt;/code&gt;&lt;br /&gt;Assigning only the first index &lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;data[0]&lt;/code&gt; &lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;sha&lt;/code&gt; key (where our commit id is) to a variable &lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;id&lt;/code&gt; since our request returned an array of objects with all the commits and info.&lt;/p&gt;&lt;p&gt;&lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;slice(0,7)&lt;/code&gt;&lt;br /&gt;Takes only the first 7 digits since it is the Git default for a short SHA&lt;/p&gt;&lt;h4 id=\\&quot;full-code\\&quot;&gt;&lt;a name=\\&quot;full-code\\&quot;&gt;Full Code&lt;/a&gt;&lt;/h4&gt;&lt;script src=\\&quot;https://gist.github.com/rohanharikr/aef6d401adc26f403efe98d6238602d4.js\\&quot;&gt;&lt;/script&gt;&quot;, &quot;url&quot;: &quot;http://localhost:4000/2020/06/11/show-latest-commit-svelte&quot;, &quot;date_published&quot;: &quot;2020-06-11T00:00:00+05:30&quot;, &quot;date_modified&quot;: &quot;2020-06-11T00:00:00+05:30&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null } }, { &quot;id&quot;: &quot;http://localhost:4000/2020/06/02/rock-paper-scissors-javascript&quot;, &quot;title&quot;: &quot;Rock, paper, scissors, javascript&quot;, &quot;summary&quot;: null, &quot;content_text&quot;: &quot;Scroll down for full codeOutput// Pass a choice as an argument to the main function.You chose paper and computer chose rock.You win!Create an array of all possible choicesconst choices = [\\&quot;rock\\&quot;, \\&quot;paper\\&quot;, \\&quot;scissors\\&quot;]Random ChoiceThis would give us a random number between 1 and the array length which in this case happens to be 3.Math.floor(Math.random() * choices.length)Main functionThe Random Choice code is put inside a function because ideally, every time this function is called, a new choice would be generated.function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`)...}MatchmakingFirst things first, let’s consider all the tie cases.function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`) \\tif (userChoice === computerChoice) { console.log(\\&quot;It&#39;s a tie!\\&quot;) }...}All the cases when your choice is rockif (userChoice === \\&quot;rock\\&quot;) {\\tif (computerChoice === \\&quot;paper\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } else if (computerChoice === \\&quot;scissors\\&quot;) { console.log(\\&quot;You won!\\&quot;) }Repeat for other n choices; this case, twoif (userChoice === \\&quot;paper\\&quot;) { if (computerChoice === \\&quot;rock\\&quot;) { console.log(\\&quot;You won!\\&quot;) } else if (computerChoice === \\&quot;scissors\\&quot;) { console.log(\\&quot;You lost!\\&quot;) }}if (userChoice === \\&quot;scissors\\&quot;) { if (computerChoice === \\&quot;rock\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } else if (computerChoice === \\&quot;paper\\&quot;) { console.log(\\&quot;You won!\\&quot;) }}Optimise by writing all the cases in one blockif (userChoice === computerChoice) { console.log(\\&quot;It&#39;s a tie!\\&quot;) } else if (userChoice === \\&quot;rock\\&quot;) { if (computerChoice === \\&quot;paper\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } else if (computerChoice === \\&quot;scissors\\&quot;) { console.log(\\&quot;You won!\\&quot;) } } else if (userChoice === \\&quot;paper\\&quot;) { if (computerChoice === \\&quot;rock\\&quot;) { console.log(\\&quot;You won!\\&quot;) } else if (computerChoice === \\&quot;scissors\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } } else if (userChoice === \\&quot;scissors\\&quot;) { if (computerChoice === \\&quot;rock\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } else if (computerChoice === \\&quot;paper\\&quot;) { console.log(\\&quot;You won!\\&quot;) } }Full Code&quot;, &quot;content_html&quot;: &quot;&lt;h4 id=\\&quot;scroll-down-for-full-code\\&quot;&gt;&lt;a href=\\&quot;#full-code\\&quot;&gt;Scroll down for full code&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=\\&quot;output\\&quot;&gt;Output&lt;/h4&gt;&lt;div class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;// Pass a choice as an argument to the main function.You chose paper and computer chose rock.You win!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\\&quot;create-an-array-of-all-possible-choices\\&quot;&gt;Create an array of all possible choices&lt;/h4&gt;&lt;p&gt;&lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;const choices = [\\&quot;rock\\&quot;, \\&quot;paper\\&quot;, \\&quot;scissors\\&quot;]&lt;/code&gt;&lt;/p&gt;&lt;h4 id=\\&quot;random-choice\\&quot;&gt;Random Choice&lt;/h4&gt;&lt;p&gt;This would give us a random number between 1 and the array length which in this case happens to be 3.&lt;/p&gt;&lt;p&gt;&lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;Math.floor(Math.random() * choices.length)&lt;/code&gt;&lt;/p&gt;&lt;h4 id=\\&quot;main-function\\&quot;&gt;Main function&lt;/h4&gt;&lt;p&gt;The &lt;code class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;Random Choice&lt;/code&gt; code is put inside a function because ideally, every time this function is called, a new choice would be generated.&lt;/p&gt;&lt;div class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`)...}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\\&quot;matchmaking\\&quot;&gt;Matchmaking&lt;/h4&gt;&lt;p&gt;First things first, let’s consider all the tie cases.&lt;/p&gt;&lt;div class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`) \\tif (userChoice === computerChoice) { console.log(\\&quot;It&#39;s a tie!\\&quot;) }...}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\\&quot;all-the-cases-when-your-choice-is-rock\\&quot;&gt;All the cases when your choice is rock&lt;/h4&gt;&lt;div class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;if (userChoice === \\&quot;rock\\&quot;) {\\tif (computerChoice === \\&quot;paper\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } else if (computerChoice === \\&quot;scissors\\&quot;) { console.log(\\&quot;You won!\\&quot;) }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\\&quot;repeat-for-other-n-choices-this-case-two\\&quot;&gt;Repeat for other n choices; this case, two&lt;/h4&gt;&lt;div class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;if (userChoice === \\&quot;paper\\&quot;) { if (computerChoice === \\&quot;rock\\&quot;) { console.log(\\&quot;You won!\\&quot;) } else if (computerChoice === \\&quot;scissors\\&quot;) { console.log(\\&quot;You lost!\\&quot;) }}if (userChoice === \\&quot;scissors\\&quot;) { if (computerChoice === \\&quot;rock\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } else if (computerChoice === \\&quot;paper\\&quot;) { console.log(\\&quot;You won!\\&quot;) }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\\&quot;optimise-by-writing-all-the-cases-in-one-block\\&quot;&gt;Optimise by writing all the cases in one block&lt;/h4&gt;&lt;div class=\\&quot;language-plaintext highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;if (userChoice === computerChoice) { console.log(\\&quot;It&#39;s a tie!\\&quot;) } else if (userChoice === \\&quot;rock\\&quot;) { if (computerChoice === \\&quot;paper\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } else if (computerChoice === \\&quot;scissors\\&quot;) { console.log(\\&quot;You won!\\&quot;) } } else if (userChoice === \\&quot;paper\\&quot;) { if (computerChoice === \\&quot;rock\\&quot;) { console.log(\\&quot;You won!\\&quot;) } else if (computerChoice === \\&quot;scissors\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } } else if (userChoice === \\&quot;scissors\\&quot;) { if (computerChoice === \\&quot;rock\\&quot;) { console.log(\\&quot;You lost!\\&quot;) } else if (computerChoice === \\&quot;paper\\&quot;) { console.log(\\&quot;You won!\\&quot;) } }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=\\&quot;full-code\\&quot;&gt;&lt;a name=\\&quot;full-code\\&quot;&gt;Full Code&lt;/a&gt;&lt;/h4&gt;&lt;script src=\\&quot;https://gist.github.com/rohanharikr/8bfbd1471389e795b436cd87ab09a444.js\\&quot;&gt;&lt;/script&gt;&quot;, &quot;url&quot;: &quot;http://localhost:4000/2020/06/02/rock-paper-scissors-javascript&quot;, &quot;date_published&quot;: &quot;2020-06-02T00:00:00+05:30&quot;, &quot;date_modified&quot;: &quot;2020-06-02T00:00:00+05:30&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null } }, { &quot;id&quot;: &quot;http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold&quot;, &quot;title&quot;: &quot;See who liked you without Tinder Gold&quot;, &quot;summary&quot;: &quot;What is the difference between various font formats?&quot;, &quot;content_text&quot;: &quot;ResultImages of people who liked you at 640x800, 320x400, 172x216 without Tinder Gold.SoTinder likes without Gold comes up like this, a blur effect on the photo(s). \\tInitially, I thought that the blurred images were sent from their servers itself.A simple inspection on the code-webkit-filter: blur(8px)filter: blur(8px)Okay, so they are applying a blur effect with CSS. Disabling this would give me a raw image of 172x216 dimension. Exploring media items, the recently liked (only one) would be of 320x400 dimension.https://preview.gotinder.com/18d6e533-c874-48ad-ac66-ae6b63aa77fb/172x216_c77f0e5c-40b4-4af4-9b68-5f0ff26ead90.jpgThe 172x216 in the URL is the dimensions. Changing it to 320x400, would give me an image of that dimension. All the images were coming from the same endpoint. So, I tried changing it to random dimensions with the same aspect ratio which like I guessed didn’t work because they were not storing (x dimension) in their server.Also, noticed that my profile picture was of better quality.To my surprise, that too was coming from the same endpoint. So, now I know that Tinder stores images in 640x800 also.So, that’s that.&quot;, &quot;content_html&quot;: &quot;&lt;h4 id=\\&quot;result\\&quot;&gt;Result&lt;/h4&gt;&lt;p&gt;Images of people who liked you at 640x800, 320x400, 172x216 without Tinder Gold.&lt;/p&gt;&lt;p&gt;&lt;img src=\\&quot;../../../assets/images/result.png\\&quot; alt=\\&quot;\\&quot; /&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;h4 id=\\&quot;so\\&quot;&gt;So&lt;/h4&gt;&lt;p&gt;Tinder likes without Gold comes up like this, a blur effect on the photo(s).&lt;/p&gt;&lt;p&gt;&lt;img src=\\&quot;../../../assets/images/tindergold.png\\&quot; alt=\\&quot;\\&quot; /&gt; \\tInitially, I thought that the blurred images were sent from their servers itself.A simple inspection on the code&lt;/p&gt;&lt;div class=\\&quot;language-html highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;-webkit-filter: blur(8px)filter: blur(8px)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;Okay, so they are applying a blur effect with CSS. Disabling this would give me a raw image of 172x216 dimension. Exploring media items, the recently liked (only one) would be of 320x400 dimension.&lt;/p&gt;&lt;div class=\\&quot;language-html highlighter-rouge\\&quot;&gt;&lt;div class=\\&quot;highlight\\&quot;&gt;&lt;pre class=\\&quot;highlight\\&quot;&gt;&lt;code&gt;https://preview.gotinder.com/18d6e533-c874-48ad-ac66-ae6b63aa77fb/172x216_c77f0e5c-40b4-4af4-9b68-5f0ff26ead90.jpg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;The 172x216 in the URL is the dimensions. Changing it to 320x400, would give me an image of that dimension. All the images were coming from the same endpoint. So, I tried changing it to random dimensions with the same aspect ratio which like I guessed didn’t work because they were not storing (x dimension) in their server.&lt;/p&gt;&lt;p&gt;&lt;img src=\\&quot;../../../assets/images/error.png\\&quot; alt=\\&quot;\\&quot; /&gt;&lt;/p&gt;&lt;p&gt;Also, noticed that my profile picture was of better quality.&lt;/p&gt;&lt;p&gt;&lt;img src=\\&quot;../../../assets/images/profile.png\\&quot; alt=\\&quot;\\&quot; /&gt;&lt;/p&gt;&lt;p&gt;To my surprise, that too was coming from the same endpoint. So, now I know that Tinder stores images in 640x800 also.&lt;/p&gt;&lt;p&gt;So, that’s that.&lt;/p&gt;&quot;, &quot;url&quot;: &quot;http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold&quot;, &quot;date_published&quot;: &quot;2019-04-05T00:00:00+05:30&quot;, &quot;date_modified&quot;: &quot;2019-04-05T00:00:00+05:30&quot;, &quot;author&quot;: { &quot;name&quot;: &quot;rohan&quot;, &quot;url&quot;: null, &quot;avatar&quot;: null } } ] }","@type":"WebPage","headline":"rohan","url":"http://localhost:4000/feed.json","@context":"https://schema.org"}</script><title> rohan - I have too many hobbies...</title><link rel="shortcut icon" href="/favicon.png"><link rel="alternate" type="application/atom+xml" title="rohan" href="/atom.xml"><link rel="alternate" type="application/json" title="rohan" href="http://localhost:4000/feed.json" /><link rel="sitemap" type="application/xml" title="sitemap" href="/sitemap.xml" /><style> *,:after,:before{box-sizing:border-box;background-color:inherit;color:inherit;margin:0;padding:0}body{font-family:system-ui, sans-serif;-webkit-font-smoothing:antialiased;text-rendering:optimizeLegibility;line-height:1.5;font-size:1rem;color:#16171a}nav ul{border-right:1px solid #edf2f7}a{color:#000;text-decoration-skip-ink:auto;text-decoration:underline}pre{margin:.5rem 0;padding:.5rem}.post p{margin:.5rem 0}.post h1,.post h2,.post h3,.post h4{margin:1rem 0}.post h2:first-child,.project h2:first-child,.photo h2:first-child{margin-top:0}.meta{margin:2rem 0}code,pre{background:#ecedee}code{padding:.1rem}pre code{border:none}pre{padding:1rem;overflow-x:auto}img{max-width:100%}hr{background:#000;height:1px;border:0}header{flex-basis:10rem;flex-grow:1;position:relative}header a{text-decoration:none}header li{margin-bottom:.2rem;text-align:right;margin-right:2rem}header a.active{font-weight:bold}header,section{padding:1rem}blockquote{font-style:italic;border-left:5px solid #ececec;padding-left:1rem}h1,h2,h3,h4,h5{line-height:1;margin:1rem 0;font-weight:600}section h1:first-child{margin-top:0}strong,b{font-weight:bold}.photos ul{list-style:none}.photos li{margin-bottom:1.5rem}.photo picture,.project picture{margin-bottom:0.5rem}.posts ul,header ul{list-style:none}.posts li{align-items:center;display:flex;justify-content:space-between;margin-bottom:.5rem}.posts li a,.posts li div,.projects li a{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;text-decoration:none}.posts li time,.projects li time{padding-left:1rem;white-space:nowrap;font-variant-numeric:tabular-nums}main{display:flex;flex-wrap:wrap;max-width:60rem;margin:2rem auto;padding:1rem}@media screen and (max-width: 45rem){header li{display:inline;margin-right:1rem}.logo{padding-bottom:1rem}header ul{border-bottom:1px solid #edf2f7;padding-bottom:2rem}nav ul{border-right:0px}.photos ul{margin-top:0.5rem}}section{flex-basis:0;flex-grow:999;min-width:70%;display:flex;flex-direction:column}figcaption{font-size:smaller}</style></head><body><main role="main"><header role="banner"> <!--<h1 class="logo">rohan</h1>--><nav role="navigation"><ul><li><a href="/" >About</a></li><li><a href="/projects" >Work</a></li><li><a href="/writing" >Writing</a></li><li><a href="/search" >Search</a></li><li><a href="/atom.xml" >Rss</a></li></ul></nav></header><section class="post"><h2></h2>{ "version": "https://jsonfeed.org/version/1", "title": "rohan", "home_page_url": "http://localhost:4000/", "feed_url": "http://localhost:4000/feed.json", "description": "I have too many hobbies...", "icon": "http://localhost:4000/apple-touch-icon.png", "favicon": "http://localhost:4000/favicon.ico", "expired": false, "author": { "name": "rohan", "url": null, "avatar": null }, "items": [ { "id": "http://localhost:4000/2020/06/11/show-latest-commit-svelte", "title": "Show latest commit on Svelte", "summary": null, "content_text": "Scroll down for full codeOutputcommit 72ea82sImport onMount from Svelteimport { onMount } from 'svelte'onMount runs immediately after the component is rendered to the DOM.Write a simple fetch function to fetch from the Github APISo here we are telling Svelte to fetch some data from this API when the component is first rendered. Note that the functions inside the onMount is only triggered when it enters the DOM.onMount(async () =&gt; { await fetch('https://api.github.com/repos/${userName}/${repoName}/commits') .then((response) =&gt; response.json()) .then((data) =&gt; { id = data[0].sha.slice(0, 7) })})await fetch('https://api.github.com/repos/${userName}/${repoName}/commits')Performs a fetch request to the Github API’s. Replace this userName and repoName with yours..then((response) =&gt; response.json())Converts the response to .json objects..then((data) =&gt; {id = data[0].sha.slice(0, 7)})Assigning only the first index data[0] sha key (where our commit id is) to a variable id since our request returned an array of objects with all the commits and info.slice(0,7)Takes only the first 7 digits since it is the Git default for a short SHAFull Code", "content_html": "<h4 id=\"scroll-down-for-full-code\"><a href=\"#full-code\">Scroll down for full code</a></h4><h4 id=\"output\">Output</h4><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>commit 72ea82s</code></pre></div></div><h4 id=\"import-onmount-from-svelte\">Import onMount from Svelte</h4><p><code class=\"language-plaintext highlighter-rouge\">import { onMount } from 'svelte'</code></p><p><code class=\"language-plaintext highlighter-rouge\">onMount</code> runs immediately after the component is rendered to the DOM.</p><h4 id=\"write-a-simple-fetch-function-to-fetch-from-the-github-api\">Write a simple fetch function to fetch from the Github API</h4><p>So here we are telling Svelte to fetch some data from this API when the component is first rendered. Note that the functions inside the <code class=\"language-plaintext highlighter-rouge\">onMount</code> is only triggered when it enters the DOM.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>onMount(async () =&gt; {  await fetch('https://api.github.com/repos/${userName}/${repoName}/commits')    .then((response) =&gt; response.json())    .then((data) =&gt; {      id = data[0].sha.slice(0, 7)    })})</code></pre></div></div><p><code class=\"language-plaintext highlighter-rouge\">await fetch('https://api.github.com/repos/${userName}/${repoName}/commits')</code>Performs a fetch request to the Github API’s. Replace this <code class=\"language-plaintext highlighter-rouge\">userName</code> and <code class=\"language-plaintext highlighter-rouge\">repoName</code> with yours.</p><p><code class=\"language-plaintext highlighter-rouge\">.then((response) =&gt; response.json())</code><br />Converts the response to <code class=\"language-plaintext highlighter-rouge\">.json</code> objects.</p><p><code class=\"language-plaintext highlighter-rouge\">.then((data) =&gt; {id = data[0].sha.slice(0, 7)})</code><br />Assigning only the first index <code class=\"language-plaintext highlighter-rouge\">data[0]</code> <code class=\"language-plaintext highlighter-rouge\">sha</code> key (where our commit id is) to a variable <code class=\"language-plaintext highlighter-rouge\">id</code> since our request returned an array of objects with all the commits and info.</p><p><code class=\"language-plaintext highlighter-rouge\">slice(0,7)</code><br />Takes only the first 7 digits since it is the Git default for a short SHA</p><h4 id=\"full-code\"><a name=\"full-code\">Full Code</a></h4><script src=\"https://gist.github.com/rohanharikr/aef6d401adc26f403efe98d6238602d4.js\"></script>", "url": "http://localhost:4000/2020/06/11/show-latest-commit-svelte", "date_published": "2020-06-11T00:00:00+05:30", "date_modified": "2020-06-11T00:00:00+05:30", "author": { "name": "rohan", "url": null, "avatar": null } }, { "id": "http://localhost:4000/2020/06/02/rock-paper-scissors-javascript", "title": "Rock, paper, scissors, javascript", "summary": null, "content_text": "Scroll down for full codeOutput// Pass a choice as an argument to the main function.You chose paper and computer chose rock.You win!Create an array of all possible choicesconst choices = [\"rock\", \"paper\", \"scissors\"]Random ChoiceThis would give us a random number between 1 and the array length which in this case happens to be 3.Math.floor(Math.random() * choices.length)Main functionThe Random Choice code is put inside a function because ideally, every time this function is called, a new choice would be generated.function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`)...}MatchmakingFirst things first, let’s consider all the tie cases.function game(userChoice) { const computerChoice = choices[Math.floor(Math.random() * choices.length)] console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`) \tif (userChoice === computerChoice) { console.log(\"It's a tie!\") }...}All the cases when your choice is rockif (userChoice === \"rock\") {\tif (computerChoice === \"paper\") { console.log(\"You lost!\") } else if (computerChoice === \"scissors\") { console.log(\"You won!\") }Repeat for other n choices; this case, twoif (userChoice === \"paper\") { if (computerChoice === \"rock\") { console.log(\"You won!\") } else if (computerChoice === \"scissors\") { console.log(\"You lost!\") }}if (userChoice === \"scissors\") { if (computerChoice === \"rock\") { console.log(\"You lost!\") } else if (computerChoice === \"paper\") { console.log(\"You won!\") }}Optimise by writing all the cases in one blockif (userChoice === computerChoice) { console.log(\"It's a tie!\") } else if (userChoice === \"rock\") { if (computerChoice === \"paper\") { console.log(\"You lost!\") } else if (computerChoice === \"scissors\") { console.log(\"You won!\") } } else if (userChoice === \"paper\") { if (computerChoice === \"rock\") { console.log(\"You won!\") } else if (computerChoice === \"scissors\") { console.log(\"You lost!\") } } else if (userChoice === \"scissors\") { if (computerChoice === \"rock\") { console.log(\"You lost!\") } else if (computerChoice === \"paper\") { console.log(\"You won!\") } }Full Code", "content_html": "<h4 id=\"scroll-down-for-full-code\"><a href=\"#full-code\">Scroll down for full code</a></h4><h4 id=\"output\">Output</h4><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// Pass a choice as an argument to the main function.You chose paper and computer chose rock.You win!</code></pre></div></div><h4 id=\"create-an-array-of-all-possible-choices\">Create an array of all possible choices</h4><p><code class=\"language-plaintext highlighter-rouge\">const choices = [\"rock\", \"paper\", \"scissors\"]</code></p><h4 id=\"random-choice\">Random Choice</h4><p>This would give us a random number between 1 and the array length which in this case happens to be 3.</p><p><code class=\"language-plaintext highlighter-rouge\">Math.floor(Math.random() * choices.length)</code></p><h4 id=\"main-function\">Main function</h4><p>The <code class=\"language-plaintext highlighter-rouge\">Random Choice</code> code is put inside a function because ideally, every time this function is called, a new choice would be generated.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function game(userChoice) {    const computerChoice = choices[Math.floor(Math.random() * choices.length)]    console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`)...}</code></pre></div></div><h4 id=\"matchmaking\">Matchmaking</h4><p>First things first, let’s consider all the tie cases.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>function game(userChoice) {    const computerChoice = choices[Math.floor(Math.random() * choices.length)]    console.log(`You chose ${userChoice} and computer chose ${computerChoice}.`)   \tif (userChoice === computerChoice) {        console.log(\"It's a tie!\")    }...}</code></pre></div></div><h4 id=\"all-the-cases-when-your-choice-is-rock\">All the cases when your choice is rock</h4><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if (userChoice === \"rock\") {\tif (computerChoice === \"paper\") {            console.log(\"You lost!\")    } else if (computerChoice === \"scissors\") {            console.log(\"You won!\")    }</code></pre></div></div><h4 id=\"repeat-for-other-n-choices-this-case-two\">Repeat for other n choices; this case, two</h4><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if (userChoice === \"paper\") {    if (computerChoice === \"rock\") {        console.log(\"You won!\")    } else if (computerChoice === \"scissors\") {        console.log(\"You lost!\")    }}if (userChoice === \"scissors\") {    if (computerChoice === \"rock\") {        console.log(\"You lost!\")    } else if (computerChoice === \"paper\") {        console.log(\"You won!\")    }}</code></pre></div></div><h4 id=\"optimise-by-writing-all-the-cases-in-one-block\">Optimise by writing all the cases in one block</h4><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if (userChoice === computerChoice) {        console.log(\"It's a tie!\")    } else if (userChoice === \"rock\") {        if (computerChoice === \"paper\") {            console.log(\"You lost!\")        } else if (computerChoice === \"scissors\") {            console.log(\"You won!\")        }    } else if (userChoice === \"paper\") {        if (computerChoice === \"rock\") {            console.log(\"You won!\")        } else if (computerChoice === \"scissors\") {            console.log(\"You lost!\")        }    } else if (userChoice === \"scissors\") {        if (computerChoice === \"rock\") {            console.log(\"You lost!\")        } else if (computerChoice === \"paper\") {            console.log(\"You won!\")        }    }</code></pre></div></div><h4 id=\"full-code\"><a name=\"full-code\">Full Code</a></h4><script src=\"https://gist.github.com/rohanharikr/8bfbd1471389e795b436cd87ab09a444.js\"></script>", "url": "http://localhost:4000/2020/06/02/rock-paper-scissors-javascript", "date_published": "2020-06-02T00:00:00+05:30", "date_modified": "2020-06-02T00:00:00+05:30", "author": { "name": "rohan", "url": null, "avatar": null } }, { "id": "http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold", "title": "See who liked you without Tinder Gold", "summary": "What is the difference between various font formats?", "content_text": "ResultImages of people who liked you at 640x800, 320x400, 172x216 without Tinder Gold.SoTinder likes without Gold comes up like this, a blur effect on the photo(s). \tInitially, I thought that the blurred images were sent from their servers itself.A simple inspection on the code-webkit-filter: blur(8px)filter: blur(8px)Okay, so they are applying a blur effect with CSS. Disabling this would give me a raw image of 172x216 dimension. Exploring media items, the recently liked (only one) would be of 320x400 dimension.https://preview.gotinder.com/18d6e533-c874-48ad-ac66-ae6b63aa77fb/172x216_c77f0e5c-40b4-4af4-9b68-5f0ff26ead90.jpgThe 172x216 in the URL is the dimensions. Changing it to 320x400, would give me an image of that dimension. All the images were coming from the same endpoint. So, I tried changing it to random dimensions with the same aspect ratio which like I guessed didn’t work because they were not storing (x dimension) in their server.Also, noticed that my profile picture was of better quality.To my surprise, that too was coming from the same endpoint. So, now I know that Tinder stores images in 640x800 also.So, that’s that.", "content_html": "<h4 id=\"result\">Result</h4><p>Images of people who liked you at 640x800, 320x400, 172x216 without Tinder Gold.</p><p><img src=\"../../../assets/images/result.png\" alt=\"\" /></p><p><br /></p><h4 id=\"so\">So</h4><p>Tinder likes without Gold comes up like this, a blur effect on the photo(s).</p><p><img src=\"../../../assets/images/tindergold.png\" alt=\"\" /> \tInitially, I thought that the blurred images were sent from their servers itself.A simple inspection on the code</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>-webkit-filter: blur(8px)filter: blur(8px)</code></pre></div></div><p>Okay, so they are applying a blur effect with CSS. Disabling this would give me a raw image of 172x216 dimension. Exploring media items, the recently liked (only one) would be of 320x400 dimension.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://preview.gotinder.com/18d6e533-c874-48ad-ac66-ae6b63aa77fb/172x216_c77f0e5c-40b4-4af4-9b68-5f0ff26ead90.jpg</code></pre></div></div><p>The 172x216 in the URL is the dimensions. Changing it to 320x400, would give me an image of that dimension. All the images were coming from the same endpoint. So, I tried changing it to random dimensions with the same aspect ratio which like I guessed didn’t work because they were not storing (x dimension) in their server.</p><p><img src=\"../../../assets/images/error.png\" alt=\"\" /></p><p>Also, noticed that my profile picture was of better quality.</p><p><img src=\"../../../assets/images/profile.png\" alt=\"\" /></p><p>To my surprise, that too was coming from the same endpoint. So, now I know that Tinder stores images in 640x800 also.</p><p>So, that’s that.</p>", "url": "http://localhost:4000/2019/04/05/see-who-liked-you-without-tinder-gold", "date_published": "2019-04-05T00:00:00+05:30", "date_modified": "2019-04-05T00:00:00+05:30", "author": { "name": "rohan", "url": null, "avatar": null } } ] }</section></main></body></html>
